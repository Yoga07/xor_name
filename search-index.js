var searchIndex = JSON.parse('{\
"xor_name":{"doc":"xor_name","t":[3,17,3,12,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Prefix","XOR_NAME_LEN","XorName","0","from_content","random","bit","cmp_distance","xor_name","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","deref","fmt","fmt","fmt","eq","eq","ne","cmp","cmp","partial_cmp","partial_cmp","not","hash","hash","from_str","fmt","fmt","fmt","fmt","as_ref","as_ref","clone","clone","default","default","serialize","serialize","deserialize","deserialize","new","name","pushed","popped","bit_count","is_empty","is_compatible","is_extension_of","is_neighbour","common_prefix","matches","cmp_distance","cmp_breadth_first","lower_bound","upper_bound","range_inclusive","is_covered_by","with_flipped_bit","substituted_in","sibling","ancestor","ancestors"],"q":["xor_name","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A section prefix, i.e. a sequence of bits specifying the …","Constant byte length of <code>XorName</code>.","A 256-bit number, viewed as a point in XOR space.","","Generate a XorName for the given content (for …","Generate a random XorName","Returns <code>true</code> if the <code>i</code>-th bit is <code>1</code>.","Compares the distance of the arguments to <code>self</code>. Returns …","Creates XorName with the given leading bytes and the rest …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Prefix</code> with the first <code>bit_count</code> bits of <code>name</code>…","Returns the name of this prefix.","Returns <code>self</code> with an appended bit: <code>0</code> if <code>bit</code> is <code>false</code>, and …","Returns a prefix copying the first <code>bitcount() - 1</code> bits …","Returns the number of bits in the prefix.","Returns <code>true</code> if this is the empty prefix, with no bits.","Returns <code>true</code> if <code>self</code> is a prefix of <code>other</code> or vice versa.","Returns <code>true</code> if <code>other</code> is compatible but strictly shorter …","Returns <code>true</code> if the <code>other</code> prefix differs in exactly one …","Returns the number of common leading bits with the input …","Returns <code>true</code> if this is a prefix of the given <code>name</code>.","Compares the distance of <code>self</code> and <code>other</code> to <code>target</code>. …","Compares the prefixes using breadth-first order. That is, …","Returns the smallest name matching the prefix","Returns the largest name matching the prefix","Inclusive range from lower_bound to upper_bound","Returns whether the namespace defined by <code>self</code> is covered …","Returns the neighbouring prefix differing in the <code>i</code>-th bit …","Returns the given <code>name</code> with first bits replaced by <code>self</code>","Returns the same prefix, with the last bit flipped, or …","Returns the ancestors of this prefix that has the given …","Returns an iterator that yields all ancestors of this …"],"i":[0,0,0,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,2,1,1,2,1,2,2,1,1,1,1,1,2,1,2,1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[null,null,null,null,[[]],[[]],[[["u8",15]],["bool",15]],[[],["ordering",4]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["bool",15]],[[["xorname",3]],["bool",15]],[[["xorname",3]],["bool",15]],[[],["ordering",4]],[[["xorname",3]],["ordering",4]],[[],[["option",4],["ordering",4]]],[[["xorname",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[["str",15]],["result",4]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["prefix",3]],[[],["xorname",3]],[[],["prefix",3]],[[],["xorname",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["xorname",3]]],[[],["xorname",3]],[[["bool",15]]],[[]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["xorname",3]],["usize",15]],[[["xorname",3]],["bool",15]],[[["xorname",3]],["ordering",4]],[[],["ordering",4]],[[],["xorname",3]],[[],["xorname",3]],[[],[["xorname",3],["rangeinclusive",3]]],[[],["bool",15]],[[["u8",15]]],[[["xorname",3]],["xorname",3]],[[]],[[["u8",15]]],[[],["ancestors",3]]],"p":[[3,"XorName"],[3,"Prefix"]]}\
}');
initSearch(searchIndex);